=====================
OVERVIEW
=====================
In the summer of 2010, the Smithsonian Institution Libraries, with a grant from the Atherton Seidell 
Endowment Fund, developed a process to scan folio volumes, large fold-outs, and other materials not 
suitable to our existing digitization workflow. As part of this process, the Macaw tool was developed 
to collect page-level metadata and manage the scanned pages. The result is a complete digital version 
of the item ready to be shared with external systems, such as the Biodiversity Heritage Library and 
the Internet Archive.

=====================
PREREQUISITES
=====================
Macaw runs on PHP and therefore needs a web server, too. PHP uses the CodeIgniter Framework, which is
built in, so you don't need to install it. However, since Macaw does a variety of things, there are more
than a few requirements. Hopefully none of these will be difficult to install on Linux. Most or all of them should
be available in apt, aptitude or yum.

	- Apache 2.2
	- PHP 5.3.x 
	- PostgreSQL 8.2+
	- PHP PECL module zip 
	- PHP Pear module Archive_Tar
	- PHP XSL extension
	- PHP PgSQL extension
	- ImageMagick 6.3+
	- Jasper library (needed for JPEG2000 files)
	- CURL (needed for uploading files to the Internet Archive)
	- Apache php5 module 
	- Apache mod_rewrite module
	- Apache mod_headers module 
	
Optional items

	- YAZ (needed if using Z39.50 to retrieve MARCXML data)


=====================
GETTING MACAW
=====================
There are two ways to get Macaw. Download a tarball or checkout from subversion.

Downlodad tarball:
	
	This URI always points to the most recent version of Macaw that is available

	https://github.com/cajunjoel/macaw-book-metadata-tool/archive/master.zip

Checkout from Subversion:

	If you want an even more up-to-date version of Macaw before it gets checked into GitHub, 
	you may get check out a clone the repository. Be sure to replace "PATH" with
	the appropriate directory name.

	git clone https://github.com/cajunjoel/macaw-book-metadata-tool.git PATH


=====================
NEW INSTALLATION
=====================
For a new installation of Macaw: 

1. Copy the files into the appropriate location on your web server. Be sure to use paths appropriate
for your system.

	$ curl -O -L https://github.com/cajunjoel/macaw-book-metadata-tool/archive/master.zip
	$ unzip master.zip
	$ cp -ri macaw-book-metadata-tool-master/* macaw-book-metadata-tool-master/.htaccess /var/www/htdocs/macaw
   
2. Configure your webserver

Macaw contains a .htaccess file for the configuration settings that it needs. However you 
may still need to make sure that the .htaccess file is used. To do this in Apache, be sure 
that "AllowOverride All" is set for the directory or virtual host for Macaw. Below is an example
VirtualHost entry for Apache that is suitable for Macaw. Be sure to update the paths as needed 
for your system.

	<VirtualHost *:80>
		ServerName macaw.local
	
		DocumentRoot /var/www/htdocs/
		<Directory />
			Options FollowSymLinks -Indexes
			AllowOverride All
		</Directory>
	
		ErrorLog /var/log/apache2/macaw-error.log
		CustomLog /var/log/apache2/macaw-access.log combined
	</VirtualHost>

3. Create the PostgreSQL user and database

Macaw requires a UTF-8 encoding on the database. Be sure to remember the password you used to create
the database. You'll need it during the installation process. 		

	$ createuser -U postgres --createdb --no-createrole --no-superuser --pwprompt macaw
	$ createdb -U macaw --encoding=UTF8 macaw

4. Set file and directory permissions

The webserver needs access to the various files and directories it manages. Be sure to use the appropriate
path to Macaw and user and group that your web server uses. This may be "www", "apache" or "nobody".

	$ chown -R www:www /var/www/htdocs

4. Start Macaw by going to the install.php page

	http://www.website.com/install.php
    
    
=====================
EXISTING INSTALLATION
=====================

An existing installation of Macaw is a bit more complicated to update. The /books and /incoming
directories should not be modified or overwritten. The books and incoming folders are NOT included 
in the tarball, but still, it's safer if you overwrite the existing installlation. The commands
below, especially the "find" command is suitable for replacing macaw's codebase without damaging
your installation. As usual, be sure to use the correct path to your Macaw installation.

Download the most recent .zip file:

	$ curl -O -L https://github.com/cajunjoel/macaw-neh/archive/master.zip
	$ unzip -q master.zip
	$ cd macaw-neh-master
	$ sudo cp -r * /var/www/.

Or as a shortcut:

	$ curl -O -L https://github.com/cajunjoel/macaw-neh/archive/master.zip && unzip -oq master.zip && cd macaw-neh-master && cp -r * /var/www/. && cd ..

As a reminder, Macaw does not deliver the "incoming" or "books" directories nor does it deliver
the config.php, macaw.php, or database.php files, therefore the recursive copy is non-destructive.
Also, be sure to copy the .htaccess being mindful of any changes you may have made in your installation.


=======================
UPGRADING THE DATABASE
=======================
From version 1.7 onward, Macaw attempts to upgrade the database automatically when you first load 
Macaw by going to the login page. In normal circumstances, the upgrade will happen automatically and
transparently. If something tragic goes wrong, then an error will presented and you'll need to handle the
upgrade manually or troubleshoot why the upgrade failed. 


=======================
SET UP THE CRON SCRIPTS
=======================
Macaw relies upon a few cron scripts to operate normally. The only one that is truly required
is the first, but any of these can be run from the command line at any time. Just be aware that 
they may take some time to run (in some cases, hours) and they will not produce any output.

# Once per day at 2:00am, update the Dashboard statistics. This will take only a moment to run.
0 2 * * *       /opt/local/apache2/htdocs/cron.php --run=/cron/statistics --quiet  > /dev/null

# OPTIONAL Check every hour of every weekday for new items. This will take roughly five seconds for 
# each new item discovered. Don't interrupt once started.
0 * * * 1-5     /opt/local/apache2/htdocs/cron.php --run=/cron/new_items --quiet  > /dev/null

# Once per weekday at 2:17am, export/verify/harvest/archive/etc. This could take hours to
# run depending on how much data there is to export.
17 2 * * 1-5    /opt/local/apache2/htdocs/cron.php --run=/cron/export --quiet  > /dev/null

